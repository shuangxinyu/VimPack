{'CLASSES': {'mongoengine.base.BaseDict': {'bases': ['dict'],
                                           'constructor': ['dict_items', 'instance', 'name'],
                                           'docstring': 'A special dict so we can watch any changes\n    ',
                                           'methods': [('__setitem__',
                                                        ['*args', '**kwargs'],
                                                        ''),
                                                       ('__setattr__',
                                                        ['*args', '**kwargs'],
                                                        ''),
                                                       ('__delete__',
                                                        ['*args', '**kwargs'],
                                                        ''),
                                                       ('__delitem__',
                                                        ['*args', '**kwargs'],
                                                        ''),
                                                       ('__delattr__',
                                                        ['*args', '**kwargs'],
                                                        ''),
                                                       ('clear', ['*args', '**kwargs'], ''),
                                                       ('pop', ['*args', '**kwargs'], ''),
                                                       ('popitem', ['*args', '**kwargs'], ''),
                                                       ('_mark_as_changed',
                                                        [],
                                                        'Marks a dict as changed if has an instance and a name')],
                                           'properties': ['instance', 'name']},
             'mongoengine.base.BaseDocument': {'bases': ['object'],
                                               'constructor': ['**values'],
                                               'docstring': '',
                                               'methods': [('validate',
                                                            [],
                                                            "Ensure that all fields' values are valid and that required fields\n        are present.\n        "),
                                                           ('pk',
                                                            [],
                                                            'Primary key alias\n        '),
                                                           ('to_mongo',
                                                            [],
                                                            'Return data dictionary ready for use with MongoDB.\n        '),
                                                           ('_get_collection_name',
                                                            [],
                                                            'Returns the collection name for this class.\n        '),
                                                           ('_get_subclasses',
                                                            [],
                                                            'Return a dictionary of all subclasses (found recursively).\n        '),
                                                           ('_from_son',
                                                            ['son'],
                                                            'Create an instance of a Document (subclass) from a PyMongo SON.\n        '),
                                                           ('_mark_as_changed',
                                                            ['key'],
                                                            'Marks a key as explicitly changed by the user\n        '),
                                                           ('_get_changed_fields',
                                                            ["key=''", 'inspected=None'],
                                                            'Returns a list of all fields that have explicitly been changed.\n        '),
                                                           ('_delta',
                                                            [],
                                                            'Returns the delta (set, unset) of the changes for a document.\n        Gets any values that have been explicitly changed.\n        '),
                                                           ('_geo_indices',
                                                            ['inspected_classes=None'],
                                                            ''),
                                                           ('__getstate__', [], ''),
                                                           ('__setstate__', ['__dict__'], ''),
                                                           ('__set_field_display', [], ''),
                                                           ('__get_field_display',
                                                            ['field'],
                                                            'Returns the display value for a choice field'),
                                                           ('__iter__', [], ''),
                                                           ('__getitem__',
                                                            ['name'],
                                                            "Dictionary-style field access, return a field's value if present.\n        "),
                                                           ('__setitem__',
                                                            ['name', 'value'],
                                                            "Dictionary-style field access, set a field's value.\n        "),
                                                           ('__contains__', ['name'], ''),
                                                           ('__len__', [], ''),
                                                           ('__repr__', [], ''),
                                                           ('__str__', [], ''),
                                                           ('__eq__', ['other'], ''),
                                                           ('__ne__', ['other'], ''),
                                                           ('__hash__', [], '')],
                                               'properties': ['_data',
                                                              '_initialised',
                                                              '__dict__']},
             'mongoengine.base.BaseField': {'bases': ['object'],
                                            'constructor': ['db_field=None',
                                                            'name=None',
                                                            'required=False',
                                                            'default=None',
                                                            'unique=False',
                                                            'unique_with=None',
                                                            'primary_key=False',
                                                            'validation=None',
                                                            'choices=None',
                                                            'verbose_name=None',
                                                            'help_text=None'],
                                            'docstring': "A base class for fields in a MongoDB document. Instances of this class\n    may be added to subclasses of `Document` to define a document's schema.\n\n    .. versionchanged:: 0.5 - added verbose and help text\n    ",
                                            'methods': [('__get__',
                                                         ['instance', 'owner'],
                                                         'Descriptor for retrieving a value from a field in a document. Do\n        any necessary conversion between Python and MongoDB types.\n        '),
                                                        ('__set__',
                                                         ['instance', 'value'],
                                                         'Descriptor for assigning a value to a field in a document.\n        '),
                                                        ('to_python',
                                                         ['value'],
                                                         'Convert a MongoDB-compatible type to a Python type.\n        '),
                                                        ('to_mongo',
                                                         ['value'],
                                                         'Convert a Python type to a MongoDB-compatible type.\n        '),
                                                        ('prepare_query_value',
                                                         ['op', 'value'],
                                                         'Prepare a value that is being used in a query for PyMongo.\n        '),
                                                        ('validate',
                                                         ['value'],
                                                         'Perform validation on a value.\n        '),
                                                        ('_validate', ['value'], '')],
                                            'properties': ['_index_with_types',
                                                           '_geo_index',
                                                           'creation_counter',
                                                           'auto_creation_counter',
                                                           'db_field',
                                                           'name',
                                                           'required',
                                                           'default',
                                                           'unique',
                                                           'unique_with',
                                                           'primary_key',
                                                           'validation',
                                                           'choices',
                                                           'verbose_name',
                                                           'help_text']},
             'mongoengine.base.BaseList': {'bases': ['list'],
                                           'constructor': ['list_items', 'instance', 'name'],
                                           'docstring': 'A special list so we can watch any changes\n    ',
                                           'methods': [('__setitem__',
                                                        ['*args', '**kwargs'],
                                                        ''),
                                                       ('__delitem__',
                                                        ['*args', '**kwargs'],
                                                        ''),
                                                       ('append', ['*args', '**kwargs'], ''),
                                                       ('extend', ['*args', '**kwargs'], ''),
                                                       ('insert', ['*args', '**kwargs'], ''),
                                                       ('pop', ['*args', '**kwargs'], ''),
                                                       ('remove', ['*args', '**kwargs'], ''),
                                                       ('reverse', ['*args', '**kwargs'], ''),
                                                       ('sort', ['*args', '**kwargs'], ''),
                                                       ('_mark_as_changed',
                                                        [],
                                                        'Marks a list as changed if has an instance and a name')],
                                           'properties': ['instance', 'name']},
             'mongoengine.base.ComplexBaseField': {'bases': ['mongoengine.base.BaseField'],
                                                   'constructor': [],
                                                   'docstring': 'Handles complex fields, such as lists / dictionaries.\n\n    Allows for nesting of embedded documents inside complex types.\n    Handles the lazy dereferencing of a queryset by lazily dereferencing all\n    items in a list / dict rather than one at a time.\n\n    .. versionadded:: 0.5\n    ',
                                                   'methods': [('__get__',
                                                                ['instance', 'owner'],
                                                                'Descriptor to automatically dereference references.\n        '),
                                                               ('to_python',
                                                                ['value'],
                                                                'Convert a MongoDB-compatible type to a Python type.\n        '),
                                                               ('to_mongo',
                                                                ['value'],
                                                                'Convert a Python type to a MongoDB-compatible type.\n        '),
                                                               ('validate',
                                                                ['value'],
                                                                'If field provided ensure the value is valid.\n        '),
                                                               ('prepare_query_value',
                                                                ['op', 'value'],
                                                                ''),
                                                               ('lookup_member',
                                                                ['member_name'],
                                                                ''),
                                                               ('_set_owner_document',
                                                                ['owner_document'],
                                                                ''),
                                                               ('_get_owner_document',
                                                                ['owner_document'],
                                                                '')],
                                                   'properties': ['field',
                                                                  '_owner_document',
                                                                  'owner_document']},
             'mongoengine.base.DocumentMetaclass': {'bases': ['type'],
                                                    'constructor': [],
                                                    'docstring': 'Metaclass for all documents.\n    ',
                                                    'methods': [('__new__',
                                                                 ['name', 'bases', 'attrs'],
                                                                 ''),
                                                                ('add_to_class',
                                                                 ['name', 'value'],
                                                                 '')],
                                                    'properties': []},
             'mongoengine.base.InvalidDocumentError': {'bases': ['Exception'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': []},
             'mongoengine.base.NotRegistered': {'bases': ['Exception'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'mongoengine.base.ObjectIdField': {'bases': ['mongoengine.base.BaseField'],
                                                'constructor': [],
                                                'docstring': "An field wrapper around MongoDB's ObjectIds.\n    ",
                                                'methods': [('to_python', ['value'], ''),
                                                            ('to_mongo', ['value'], ''),
                                                            ('prepare_query_value',
                                                             ['op', 'value'],
                                                             ''),
                                                            ('validate', ['value'], '')],
                                                'properties': []},
             'mongoengine.base.TopLevelDocumentMetaclass': {'bases': ['mongoengine.DocumentMetaclass'],
                                                            'constructor': [],
                                                            'docstring': 'Metaclass for top-level documents (i.e. documents that have their own\n    collection in the database.\n    ',
                                                            'methods': [('__new__',
                                                                         ['name',
                                                                          'bases',
                                                                          'attrs'],
                                                                         ''),
                                                                        ('_unique_with_indexes',
                                                                         ['new_class',
                                                                          "namespace=''"],
                                                                         '')],
                                                            'properties': []},
             'mongoengine.base.ValidationError': {'bases': ['Exception'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'mongoengine.connection.ConnectionError': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'mongoengine.dereference.DeReference': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('__call__',
                                                                  ['items',
                                                                   'max_depth=1',
                                                                   'instance=None',
                                                                   'name=None',
                                                                   'get=False'],
                                                                  '\n        Cheaply dereferences the items to a set depth.\n        Also handles the convertion of complex data types.\n\n        :param items: The iterable (dict, list, queryset) to be dereferenced.\n        :param max_depth: The maximum depth to recurse to\n        :param instance: The owning instance used for tracking changes by\n            :class:`~mongoengine.base.ComplexBaseField`\n        :param name: The name of the field, used for tracking changes by\n            :class:`~mongoengine.base.ComplexBaseField`\n        :param get: A boolean determining if being called by __get__\n        '),
                                                                 ('_find_references',
                                                                  ['items', 'depth=0'],
                                                                  '\n        Recursively finds all db references to be dereferenced\n\n        :param items: The iterable (dict, list, queryset)\n        :param depth: The current depth of recursion\n        '),
                                                                 ('_fetch_objects',
                                                                  ['doc_type=None'],
                                                                  'Fetch all references and convert to their document objects\n        '),
                                                                 ('_attach_objects',
                                                                  ['items',
                                                                   'depth=0',
                                                                   'instance=None',
                                                                   'name=None',
                                                                   'get=False'],
                                                                  '\n        Recursively finds all db references to be dereferenced\n\n        :param items: The iterable (dict, list, queryset)\n        :param depth: The current depth of recursion\n        :param instance: The owning instance used for tracking changes by\n            :class:`~mongoengine.base.ComplexBaseField`\n        :param name: The name of the field, used for tracking changes by\n            :class:`~mongoengine.base.ComplexBaseField`\n        :param get: A boolean determining if being called by __get__\n        ')],
                                                     'properties': ['max_depth',
                                                                    'reference_map',
                                                                    'object_map']},
             'mongoengine.django.auth.MongoEngineBackend': {'bases': ['object'],
                                                            'constructor': [],
                                                            'docstring': 'Authenticate using MongoEngine and mongoengine.django.auth.User.\n    ',
                                                            'methods': [('authenticate',
                                                                         ['username=None',
                                                                          'password=None'],
                                                                         ''),
                                                                        ('get_user',
                                                                         ['user_id'],
                                                                         '')],
                                                            'properties': ['supports_object_permissions',
                                                                           'supports_anonymous_user',
                                                                           'supports_inactive_user']},
             'mongoengine.django.auth.User': {'bases': ['mongoengine.django.auth.Document'],
                                              'constructor': [],
                                              'docstring': 'A User document that aims to mirror most of the API specified by Django\n    at http://docs.djangoproject.com/en/dev/topics/auth/#users\n    ',
                                              'methods': [('__unicode__', [], ''),
                                                          ('get_full_name',
                                                           [],
                                                           'Returns the users first and last names, separated by a space.\n        '),
                                                          ('is_anonymous', [], ''),
                                                          ('is_authenticated', [], ''),
                                                          ('set_password',
                                                           ['raw_password'],
                                                           "Sets the user's password - always use this rather than directly\n        assigning to :attr:`~mongoengine.django.auth.User.password` as the\n        password is hashed before storage.\n        "),
                                                          ('check_password',
                                                           ['raw_password'],
                                                           "Checks the user's password against a provided password - always use\n        this rather than directly comparing to\n        :attr:`~mongoengine.django.auth.User.password` as the password is\n        hashed before storage.\n        "),
                                                          ('create_user',
                                                           ['username',
                                                            'password',
                                                            'email=None'],
                                                           'Create (and save) a new user with the given username, password and\n        email address.\n        '),
                                                          ('get_and_delete_messages', [], '')],
                                              'properties': ['username',
                                                             'first_name',
                                                             'last_name',
                                                             'email',
                                                             'password',
                                                             'is_staff',
                                                             'is_active',
                                                             'is_superuser',
                                                             'last_login',
                                                             'date_joined',
                                                             'meta']},
             'mongoengine.django.sessions.MongoSession': {'bases': ['mongoengine.document.Document'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['session_key',
                                                                         'session_data',
                                                                         'expire_date',
                                                                         'meta']},
             'mongoengine.django.sessions.SessionStore': {'bases': ['django.contrib.sessions.backends.base.SessionBase'],
                                                          'constructor': [],
                                                          'docstring': 'A MongoEngine-based session store for Django.\n    ',
                                                          'methods': [('load', [], ''),
                                                                      ('exists',
                                                                       ['session_key'],
                                                                       ''),
                                                                      ('create', [], ''),
                                                                      ('save',
                                                                       ['must_create=False'],
                                                                       ''),
                                                                      ('delete',
                                                                       ['session_key=None'],
                                                                       '')],
                                                          'properties': ['session_key',
                                                                         'modified',
                                                                         '_session_cache']},
             'mongoengine.django.storage.FileDocument': {'bases': ['mongoengine.django.storage.Document'],
                                                         'constructor': [],
                                                         'docstring': 'A document used to store a single file in GridFS.\n    ',
                                                         'methods': [],
                                                         'properties': ['file']},
             'mongoengine.django.storage.GridFSStorage': {'bases': ['django.core.files.storage.Storage'],
                                                          'constructor': ['base_url=None'],
                                                          'docstring': 'A custom storage backend to store files in GridFS\n    ',
                                                          'methods': [('delete',
                                                                       ['name'],
                                                                       'Deletes the specified file from the storage system.\n        '),
                                                                      ('exists',
                                                                       ['name'],
                                                                       'Returns True if a file referened by the given name already exists in the\n        storage system, or False if the name is available for a new file.\n        '),
                                                                      ('listdir',
                                                                       ['path=None'],
                                                                       'Lists the contents of the specified path, returning a 2-tuple of lists;\n        the first item being directories, the second item being files.\n        '),
                                                                      ('size',
                                                                       ['name'],
                                                                       'Returns the total size, in bytes, of the file specified by name.\n        '),
                                                                      ('url',
                                                                       ['name'],
                                                                       "Returns an absolute URL where the file's contents can be accessed\n        directly by a web browser.\n        "),
                                                                      ('_get_doc_with_name',
                                                                       ['name'],
                                                                       'Find the documents in the store with the given name\n        '),
                                                                      ('_open',
                                                                       ['name', "mode='rb'"],
                                                                       ''),
                                                                      ('get_available_name',
                                                                       ['name'],
                                                                       "Returns a filename that's free on the target storage system, and\n        available for new content to be written to.\n        "),
                                                                      ('_save',
                                                                       ['name', 'content'],
                                                                       '')],
                                                          'properties': ['base_url',
                                                                         'document',
                                                                         'field']},
             'mongoengine.django.tests.MongoTestCase': {'bases': ['django.test.TestCase'],
                                                        'constructor': ["methodName='runtest'"],
                                                        'docstring': '\n    TestCase class that clear the collection between the tests\n    ',
                                                        'methods': [('_post_teardown', [], '')],
                                                        'properties': ['db_name', 'db']},
             'mongoengine.document.Document': {'bases': ['base.BaseDocument'],
                                               'constructor': [],
                                               'docstring': "The base class used for defining the structure and properties of\n    collections of documents stored in MongoDB. Inherit from this class, and\n    add fields as class attributes to define a document's structure.\n    Individual documents may then be created by making instances of the\n    :class:`~mongoengine.Document` subclass.\n\n    By default, the MongoDB collection used to store documents created using a\n    :class:`~mongoengine.Document` subclass will be the name of the subclass\n    converted to lowercase. A different collection may be specified by\n    providing :attr:`collection` to the :attr:`meta` dictionary in the class\n    definition.\n\n    A :class:`~mongoengine.Document` subclass may be itself subclassed, to\n    create a specialised version of the document that will be stored in the\n    same collection. To facilitate this behaviour, `_cls` and `_types`\n    fields are added to documents (hidden though the MongoEngine interface\n    though). To disable this behaviour and remove the dependence on the\n    presence of `_cls` and `_types`, set :attr:`allow_inheritance` to\n    ``False`` in the :attr:`meta` dictionary.\n\n    A :class:`~mongoengine.Document` may use a **Capped Collection** by\n    specifying :attr:`max_documents` and :attr:`max_size` in the :attr:`meta`\n    dictionary. :attr:`max_documents` is the maximum number of documents that\n    is allowed to be stored in the collection, and :attr:`max_size` is the\n    maximum size of the collection in bytes. If :attr:`max_size` is not\n    specified and :attr:`max_documents` is, :attr:`max_size` defaults to\n    10000000 bytes (10MB).\n\n    Indexes may be created by specifying :attr:`indexes` in the :attr:`meta`\n    dictionary. The value should be a list of field names or tuples of field\n    names. Index direction may be specified by prefixing the field names with\n    a **+** or **-** sign.\n\n    By default, _types will be added to the start of every index (that\n    doesn't contain a list) if allow_inheritence is True. This can be\n    disabled by either setting types to False on the specific index or\n    by setting index_types to False on the meta dictionary for the document.\n    ",
                                               'methods': [('_get_collection',
                                                            [],
                                                            'Returns the collection for the document.'),
                                                           ('save',
                                                            ['safe=True',
                                                             'force_insert=False',
                                                             'validate=True',
                                                             'write_options=None',
                                                             '_refs=None'],
                                                            "Save the :class:`~mongoengine.Document` to the database. If the\n        document already exists, it will be updated, otherwise it will be\n        created.\n\n        If ``safe=True`` and the operation is unsuccessful, an\n        :class:`~mongoengine.OperationError` will be raised.\n\n        :param safe: check if the operation succeeded before returning\n        :param force_insert: only try to create a new document, don't allow\n            updates of existing documents\n        :param validate: validates the document; set to ``False`` to skip.\n        :param write_options: Extra keyword arguments are passed down to\n                :meth:`~pymongo.collection.Collection.save` OR\n                :meth:`~pymongo.collection.Collection.insert`\n                which will be used as options for the resultant ``getLastError`` command.\n                For example, ``save(..., w=2, fsync=True)`` will wait until at least two servers\n                have recorded the write and will force an fsync on each server being written to.\n\n        .. versionchanged:: 0.5\n            In existing documents it only saves changed fields using set / unset\n            Saves are cascaded and any :class:`~pymongo.dbref.DBRef` objects\n            that have changes are saved as well.\n        "),
                                                           ('update',
                                                            ['**kwargs'],
                                                            'Performs an update on the :class:`~mongoengine.Document`\n        A convenience wrapper to :meth:`~mongoengine.QuerySet.update`.\n\n        Raises :class:`OperationError` if called on an object that has not yet\n        been saved.\n        '),
                                                           ('delete',
                                                            ['safe=False'],
                                                            'Delete the :class:`~mongoengine.Document` from the database. This\n        will only take effect if the document has been previously saved.\n\n        :param safe: check if the operation succeeded before returning\n        '),
                                                           ('select_related',
                                                            ['max_depth=1'],
                                                            'Handles dereferencing of :class:`~pymongo.dbref.DBRef` objects to\n        a maximum depth in order to cut down the number queries to mongodb.\n\n        .. versionadded:: 0.5\n        '),
                                                           ('reload',
                                                            [],
                                                            'Reloads all attributes from the database.\n\n        .. versionadded:: 0.1.2\n        '),
                                                           ('_reload',
                                                            ['key', 'value'],
                                                            'Used by :meth:`~mongoengine.Document.reload` to ensure the\n        correct instance is linked to self.\n        '),
                                                           ('to_dbref',
                                                            [],
                                                            'Returns an instance of :class:`~pymongo.dbref.DBRef` useful in\n        `__raw__` queries.'),
                                                           ('register_delete_rule',
                                                            ['document_cls',
                                                             'field_name',
                                                             'rule'],
                                                            'This method registers the delete rules to apply when removing this\n        object.\n        '),
                                                           ('drop_collection',
                                                            [],
                                                            'Drops the entire collection associated with this\n        :class:`~mongoengine.Document` type from the database.\n        ')],
                                               'properties': ['__metaclass__',
                                                              '_collection',
                                                              '_data',
                                                              '_changed_fields']},
             'mongoengine.document.EmbeddedDocument': {'bases': ['base.BaseDocument'],
                                                       'constructor': [],
                                                       'docstring': "A :class:`~mongoengine.Document` that isn't stored in its own\n    collection.  :class:`~mongoengine.EmbeddedDocument`\\ s should be used as\n    fields on :class:`~mongoengine.Document`\\ s through the\n    :class:`~mongoengine.EmbeddedDocumentField` field type.\n    ",
                                                       'methods': [('__delattr__',
                                                                    ['*args', '**kwargs'],
                                                                    'Handle deletions of fields')],
                                                       'properties': ['__metaclass__']},
             'mongoengine.document.InvalidCollectionError': {'bases': ['Exception'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'mongoengine.document.MapReduceDocument': {'bases': ['object'],
                                                        'constructor': ['document',
                                                                        'collection',
                                                                        'key',
                                                                        'value'],
                                                        'docstring': 'A document returned from a map/reduce query.\n\n    :param collection: An instance of :class:`~pymongo.Collection`\n    :param key: Document/result key, often an instance of\n                :class:`~pymongo.objectid.ObjectId`. If supplied as\n                an ``ObjectId`` found in the given ``collection``,\n                the object can be accessed via the ``object`` property.\n    :param value: The result(s) for this key.\n\n    .. versionadded:: 0.3\n    ',
                                                        'methods': [],
                                                        'properties': ['_document',
                                                                       '_collection',
                                                                       'key',
                                                                       'value',
                                                                       'object',
                                                                       '_key_object']},
             'mongoengine.fields.BinaryField': {'bases': ['base.BaseField'],
                                                'constructor': ['max_bytes=None', '**kwargs'],
                                                'docstring': 'A binary data field.\n    ',
                                                'methods': [('to_mongo', ['value'], ''),
                                                            ('to_python', ['value'], ''),
                                                            ('validate', ['value'], '')],
                                                'properties': ['max_bytes']},
             'mongoengine.fields.BooleanField': {'bases': ['base.BaseField'],
                                                 'constructor': [],
                                                 'docstring': 'A boolean field type.\n\n    .. versionadded:: 0.1.2\n    ',
                                                 'methods': [('to_python', ['value'], ''),
                                                             ('validate', ['value'], '')],
                                                 'properties': []},
             'mongoengine.fields.ComplexDateTimeField': {'bases': ['mongoengine.fields.StringField'],
                                                         'constructor': ["separator=','",
                                                                         '**kwargs'],
                                                         'docstring': '\n    ComplexDateTimeField handles microseconds exactly instead of rounding\n    like DateTimeField does.\n\n    Derives from a StringField so you can do `gte` and `lte` filtering by\n    using lexicographical comparison when filtering / sorting strings.\n\n    The stored string has the following format:\n\n        YYYY,MM,DD,HH,MM,SS,NNNNNN\n\n    Where NNNNNN is the number of microseconds of the represented `datetime`.\n    The `,` as the separator can be easily modified by passing the `separator`\n    keyword when initializing the field.\n\n    .. versionadded:: 0.5\n    ',
                                                         'methods': [('_leading_zero',
                                                                      ['number'],
                                                                      '\n        Converts the given number to a string.\n\n        If it has only one digit, a leading zero so as it has always at least\n        two digits.\n        '),
                                                                     ('_convert_from_datetime',
                                                                      ['val'],
                                                                      "\n        Convert a `datetime` object to a string representation (which will be\n        stored in MongoDB). This is the reverse function of\n        `_convert_from_string`.\n\n        >>> a = datetime(2011, 6, 8, 20, 26, 24, 192284)\n        >>> RealDateTimeField()._convert_from_datetime(a)\n        '2011,06,08,20,26,24,192284'\n        "),
                                                                     ('_convert_from_string',
                                                                      ['data'],
                                                                      "\n        Convert a string representation to a `datetime` object (the object you\n        will manipulate). This is the reverse function of\n        `_convert_from_datetime`.\n\n        >>> a = '2011,06,08,20,26,24,192284'\n        >>> ComplexDateTimeField()._convert_from_string(a)\n        datetime.datetime(2011, 6, 8, 20, 26, 24, 192284)\n        "),
                                                                     ('__get__',
                                                                      ['instance', 'owner'],
                                                                      ''),
                                                                     ('__set__',
                                                                      ['instance', 'value'],
                                                                      ''),
                                                                     ('validate',
                                                                      ['value'],
                                                                      ''),
                                                                     ('to_python',
                                                                      ['value'],
                                                                      ''),
                                                                     ('to_mongo',
                                                                      ['value'],
                                                                      ''),
                                                                     ('prepare_query_value',
                                                                      ['op', 'value'],
                                                                      '')],
                                                         'properties': ['names', 'separtor']},
             'mongoengine.fields.DateTimeField': {'bases': ['base.BaseField'],
                                                  'constructor': [],
                                                  'docstring': 'A datetime field.\n\n    Note: Microseconds are rounded to the nearest millisecond.\n      Pre UTC microsecond support is effecively broken.\n      Use :class:`~mongoengine.fields.ComplexDateTimeField` if you\n      need accurate microsecond support.\n    ',
                                                  'methods': [('validate', ['value'], ''),
                                                              ('to_mongo', ['value'], ''),
                                                              ('prepare_query_value',
                                                               ['op', 'value'],
                                                               '')],
                                                  'properties': []},
             'mongoengine.fields.DecimalField': {'bases': ['base.BaseField'],
                                                 'constructor': ['min_value=None',
                                                                 'max_value=None',
                                                                 '**kwargs'],
                                                 'docstring': 'A fixed-point decimal number field.\n\n    .. versionadded:: 0.3\n    ',
                                                 'methods': [('to_python', ['value'], ''),
                                                             ('to_mongo', ['value'], ''),
                                                             ('validate', ['value'], '')],
                                                 'properties': ['min_value', 'max_value']},
             'mongoengine.fields.DictField': {'bases': ['base.ComplexBaseField'],
                                              'constructor': ['basecls=None',
                                                              'field=None',
                                                              '*args',
                                                              '**kwargs'],
                                              'docstring': 'A dictionary field that wraps a standard Python dictionary. This is\n    similar to an embedded document, but the structure is not defined.\n\n    .. versionadded:: 0.3\n    .. versionchanged:: 0.5 - Can now handle complex / varying types of data\n    ',
                                              'methods': [('validate',
                                                           ['value'],
                                                           'Make sure that a list of valid fields is being used.\n        '),
                                                          ('lookup_member',
                                                           ['member_name'],
                                                           ''),
                                                          ('prepare_query_value',
                                                           ['op', 'value'],
                                                           '')],
                                              'properties': ['field', 'basecls']},
             'mongoengine.fields.EmailField': {'bases': ['mongoengine.fields.StringField'],
                                               'constructor': [],
                                               'docstring': 'A field that validates input as an E-Mail-Address.\n\n    .. versionadded:: 0.4\n    ',
                                               'methods': [('validate', ['value'], '')],
                                               'properties': ['EMAIL_REGEX']},
             'mongoengine.fields.EmbeddedDocumentField': {'bases': ['base.BaseField'],
                                                          'constructor': ['document_type',
                                                                          '**kwargs'],
                                                          'docstring': 'An embedded document field - with a declared document_type.\n    Only valid values are subclasses of :class:`~mongoengine.EmbeddedDocument`.\n    ',
                                                          'methods': [('to_python',
                                                                       ['value'],
                                                                       ''),
                                                                      ('to_mongo',
                                                                       ['value'],
                                                                       ''),
                                                                      ('validate',
                                                                       ['value'],
                                                                       'Make sure that the document instance is an instance of the\n        EmbeddedDocument subclass provided when the document was defined.\n        '),
                                                                      ('lookup_member',
                                                                       ['member_name'],
                                                                       ''),
                                                                      ('prepare_query_value',
                                                                       ['op', 'value'],
                                                                       '')],
                                                          'properties': ['document_type_obj',
                                                                         'document_type']},
             'mongoengine.fields.FileField': {'bases': ['base.BaseField'],
                                              'constructor': ['**kwargs'],
                                              'docstring': 'A GridFS storage field.\n\n    .. versionadded:: 0.4\n    .. versionchanged:: 0.5 added optional size param for read\n    ',
                                              'methods': [('__get__',
                                                           ['instance', 'owner'],
                                                           ''),
                                                          ('__set__',
                                                           ['instance', 'value'],
                                                           ''),
                                                          ('to_mongo', ['value'], ''),
                                                          ('to_python', ['value'], ''),
                                                          ('validate', ['value'], '')],
                                              'properties': ['grid_file']},
             'mongoengine.fields.FloatField': {'bases': ['base.BaseField'],
                                               'constructor': ['min_value=None',
                                                               'max_value=None',
                                                               '**kwargs'],
                                               'docstring': 'An floating point number field.\n    ',
                                               'methods': [('to_python', ['value'], ''),
                                                           ('validate', ['value'], ''),
                                                           ('prepare_query_value',
                                                            ['op', 'value'],
                                                            '')],
                                               'properties': ['min_value', 'max_value']},
             'mongoengine.fields.GenericEmbeddedDocumentField': {'bases': ['base.BaseField'],
                                                                 'constructor': [],
                                                                 'docstring': 'A generic embedded document field - allows any\n    :class:`~mongoengine.EmbeddedDocument` to be stored.\n\n    Only valid values are subclasses of :class:`~mongoengine.EmbeddedDocument`.\n    ',
                                                                 'methods': [('prepare_query_value',
                                                                              ['op', 'value'],
                                                                              ''),
                                                                             ('to_python',
                                                                              ['value'],
                                                                              ''),
                                                                             ('validate',
                                                                              ['value'],
                                                                              ''),
                                                                             ('to_mongo',
                                                                              ['document'],
                                                                              '')],
                                                                 'properties': []},
             'mongoengine.fields.GenericReferenceField': {'bases': ['base.BaseField'],
                                                          'constructor': [],
                                                          'docstring': 'A reference to *any* :class:`~mongoengine.document.Document` subclass\n    that will be automatically dereferenced on access (lazily).\n\n    ..note ::  Any documents used as a generic reference must be registered in the\n    document registry.  Importing the model will automatically register it.\n\n    .. versionadded:: 0.3\n    ',
                                                          'methods': [('__get__',
                                                                       ['instance', 'owner'],
                                                                       ''),
                                                                      ('validate',
                                                                       ['value'],
                                                                       ''),
                                                                      ('dereference',
                                                                       ['value'],
                                                                       ''),
                                                                      ('to_mongo',
                                                                       ['document'],
                                                                       ''),
                                                                      ('prepare_query_value',
                                                                       ['op', 'value'],
                                                                       '')],
                                                          'properties': []},
             'mongoengine.fields.GeoPointField': {'bases': ['base.BaseField'],
                                                  'constructor': [],
                                                  'docstring': 'A list storing a latitude and longitude.\n\n    .. versionadded:: 0.4\n    ',
                                                  'methods': [('validate',
                                                               ['value'],
                                                               'Make sure that a geo-value is of type (x, y)\n        ')],
                                                  'properties': ['_geo_index']},
             'mongoengine.fields.GridFSError': {'bases': ['Exception'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'mongoengine.fields.GridFSProxy': {'bases': ['object'],
                                                'constructor': ['grid_id=None',
                                                                'key=None',
                                                                'instance=None'],
                                                'docstring': 'Proxy object to handle writing and reading of files to and from GridFS\n\n    .. versionadded:: 0.4\n    .. versionchanged:: 0.5 - added optional size param to read\n    ',
                                                'methods': [('__getattr__', ['name'], ''),
                                                            ('__get__',
                                                             ['instance', 'value'],
                                                             ''),
                                                            ('__nonzero__', [], ''),
                                                            ('get', ['id=None'], ''),
                                                            ('new_file', ['**kwargs'], ''),
                                                            ('put',
                                                             ['file_obj', '**kwargs'],
                                                             ''),
                                                            ('write', ['string'], ''),
                                                            ('writelines', ['lines'], ''),
                                                            ('read', ['size=-1'], ''),
                                                            ('delete', [], ''),
                                                            ('replace',
                                                             ['file_obj', '**kwargs'],
                                                             ''),
                                                            ('close', [], ''),
                                                            ('_mark_as_changed',
                                                             [],
                                                             'Inform the instance that `self.key` has been changed')],
                                                'properties': ['fs',
                                                               'newfile',
                                                               'grid_id',
                                                               'gridout',
                                                               'key',
                                                               'instance']},
             'mongoengine.fields.IntField': {'bases': ['base.BaseField'],
                                             'constructor': ['min_value=None',
                                                             'max_value=None',
                                                             '**kwargs'],
                                             'docstring': 'An integer field.\n    ',
                                             'methods': [('to_python', ['value'], ''),
                                                         ('validate', ['value'], ''),
                                                         ('prepare_query_value',
                                                          ['op', 'value'],
                                                          '')],
                                             'properties': ['min_value', 'max_value']},
             'mongoengine.fields.ListField': {'bases': ['base.ComplexBaseField'],
                                              'constructor': ['field=None', '**kwargs'],
                                              'docstring': 'A list field that wraps a standard field, allowing multiple instances\n    of the field to be used as a list in the database.\n    ',
                                              'methods': [('validate',
                                                           ['value'],
                                                           'Make sure that a list of valid fields is being used.\n        '),
                                                          ('prepare_query_value',
                                                           ['op', 'value'],
                                                           '')],
                                              'properties': ['_index_with_types', 'field']},
             'mongoengine.fields.MapField': {'bases': ['mongoengine.fields.DictField'],
                                             'constructor': ['field=None', '*args', '**kwargs'],
                                             'docstring': "A field that maps a name to a specified field type. Similar to\n    a DictField, except the 'value' of each item must match the specified\n    field type.\n\n    .. versionadded:: 0.5\n    ",
                                             'methods': [],
                                             'properties': []},
             'mongoengine.fields.ReferenceField': {'bases': ['base.BaseField'],
                                                   'constructor': ['document_type',
                                                                   'reverse_delete_rule=DO_NOTHING',
                                                                   '**kwargs'],
                                                   'docstring': "A reference to a document that will be automatically dereferenced on\n    access (lazily).\n\n    Use the `reverse_delete_rule` to handle what should happen if the document\n    the field is referencing is deleted.\n\n    The options are:\n\n      * DO_NOTHING  - don't do anything (default).\n      * NULLIFY     - Updates the reference to null.\n      * CASCADE     - Deletes the documents associated with the reference.\n      * DENY        - Prevent the deletion of the reference object.\n\n    .. versionchanged:: 0.5 added `reverse_delete_rule`\n    ",
                                                   'methods': [('__get__',
                                                                ['instance', 'owner'],
                                                                'Descriptor to allow lazy dereferencing.\n        '),
                                                               ('to_mongo', ['document'], ''),
                                                               ('prepare_query_value',
                                                                ['op', 'value'],
                                                                ''),
                                                               ('validate', ['value'], ''),
                                                               ('lookup_member',
                                                                ['member_name'],
                                                                '')],
                                                   'properties': ['document_type_obj',
                                                                  'reverse_delete_rule',
                                                                  'document_type']},
             'mongoengine.fields.SequenceField': {'bases': ['mongoengine.fields.IntField'],
                                                  'constructor': ['collection_name=None',
                                                                  '*args',
                                                                  '**kwargs'],
                                                  'docstring': 'Provides a sequental counter (see http://www.mongodb.org/display/DOCS/Object+IDs#ObjectIDs-SequenceNumbers)\n\n    .. note::\n\n             Although traditional databases often use increasing sequence\n             numbers for primary keys. In MongoDB, the preferred approach is to\n             use Object IDs instead.  The concept is that in a very large\n             cluster of machines, it is easier to create an object ID than have\n             global, uniformly increasing sequence numbers.\n\n    .. versionadded:: 0.5\n    ',
                                                  'methods': [('generate_new_value',
                                                               [],
                                                               '\n        Generate and Increment the counter\n        '),
                                                              ('__get__',
                                                               ['instance', 'owner'],
                                                               ''),
                                                              ('__set__',
                                                               ['instance', 'value'],
                                                               ''),
                                                              ('to_python', ['value'], '')],
                                                  'properties': ['collection_name']},
             'mongoengine.fields.SortedListField': {'bases': ['mongoengine.fields.ListField'],
                                                    'constructor': ['field', '**kwargs'],
                                                    'docstring': 'A ListField that sorts the contents of its list before writing to\n    the database in order to ensure that a sorted list is always\n    retrieved.\n\n    .. versionadded:: 0.4\n    ',
                                                    'methods': [('to_mongo', ['value'], '')],
                                                    'properties': ['_ordering']},
             'mongoengine.fields.StringField': {'bases': ['base.BaseField'],
                                                'constructor': ['regex=None',
                                                                'max_length=None',
                                                                'min_length=None',
                                                                '**kwargs'],
                                                'docstring': 'A unicode string field.\n    ',
                                                'methods': [('to_python', ['value'], ''),
                                                            ('validate', ['value'], ''),
                                                            ('lookup_member',
                                                             ['member_name'],
                                                             ''),
                                                            ('prepare_query_value',
                                                             ['op', 'value'],
                                                             '')],
                                                'properties': ['regex',
                                                               'max_length',
                                                               'min_length']},
             'mongoengine.fields.URLField': {'bases': ['mongoengine.fields.StringField'],
                                             'constructor': ['verify_exists=False', '**kwargs'],
                                             'docstring': 'A field that validates input as an URL.\n\n    .. versionadded:: 0.3\n    ',
                                             'methods': [('validate', ['value'], '')],
                                             'properties': ['URL_REGEX', 'verify_exists']},
             'mongoengine.queryset.DoesNotExist': {'bases': ['Exception'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'mongoengine.queryset.InvalidQueryError': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'mongoengine.queryset.MultipleObjectsReturned': {'bases': ['Exception'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'mongoengine.queryset.OperationError': {'bases': ['Exception'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'mongoengine.queryset.Q': {'bases': ['mongoengine.queryset.QNode'],
                                        'constructor': ['**query'],
                                        'docstring': 'A simple query object, used in a query tree to build up more complex\n    query structures.\n    ',
                                        'methods': [('accept', ['visitor'], '')],
                                        'properties': ['query', 'empty']},
             'mongoengine.queryset.QCombination': {'bases': ['mongoengine.queryset.QNode'],
                                                   'constructor': ['operation', 'children'],
                                                   'docstring': 'Represents the combination of several conditions by a given logical\n    operator.\n    ',
                                                   'methods': [('accept', ['visitor'], '')],
                                                   'properties': ['operation',
                                                                  'children',
                                                                  'empty']},
             'mongoengine.queryset.QNode': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': 'Base class for nodes in query trees.\n    ',
                                            'methods': [('to_query', ['document'], ''),
                                                        ('accept', ['visitor'], ''),
                                                        ('_combine',
                                                         ['other', 'operation'],
                                                         'Combine this node with another node into a QCombination object.\n        '),
                                                        ('__or__', ['other'], ''),
                                                        ('__and__', ['other'], '')],
                                            'properties': ['AND', 'OR', 'empty']},
             'mongoengine.queryset.QNodeVisitor': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': 'Base visitor class for visiting Q-object nodes in a query tree.\n    ',
                                                   'methods': [('visit_combination',
                                                                ['combination'],
                                                                'Called by QCombination objects.\n        '),
                                                               ('visit_query',
                                                                ['query'],
                                                                'Called by (New)Q objects.\n        ')],
                                                   'properties': []},
             'mongoengine.queryset.QueryCompilerVisitor': {'bases': ['mongoengine.queryset.QNodeVisitor'],
                                                           'constructor': ['document'],
                                                           'docstring': 'Compiles the nodes in a query tree to a PyMongo-compatible query\n    dictionary.\n    ',
                                                           'methods': [('visit_combination',
                                                                        ['combination'],
                                                                        ''),
                                                                       ('visit_query',
                                                                        ['query'],
                                                                        ''),
                                                                       ('_mongo_query_conjunction',
                                                                        ['queries'],
                                                                        'Merges Mongo query dicts - effectively &ing them together.\n        ')],
                                                           'properties': ['document']},
             'mongoengine.queryset.QueryFieldList': {'bases': ['object'],
                                                     'constructor': ['fields=[]',
                                                                     'value=ONLY',
                                                                     'always_include=[]'],
                                                     'docstring': 'Object that handles combinations of .only() and .exclude() calls',
                                                     'methods': [('as_dict', [], ''),
                                                                 ('__add__', ['f'], ''),
                                                                 ('reset', [], ''),
                                                                 ('__nonzero__', [], '')],
                                                     'properties': ['ONLY',
                                                                    'EXCLUDE',
                                                                    'value',
                                                                    'fields',
                                                                    'always_include']},
             'mongoengine.queryset.QuerySet': {'bases': ['object'],
                                               'constructor': ['document', 'collection'],
                                               'docstring': 'A set of results returned from a query. Wraps a MongoDB cursor,\n    providing :class:`~mongoengine.Document` objects as the results.\n    ',
                                               'methods': [('clone',
                                                            [],
                                                            'Creates a copy of the current :class:`~mongoengine.queryset.QuerySet`\n\n        .. versionadded:: 0.5\n        '),
                                                           ('ensure_index',
                                                            ['key_or_list',
                                                             'drop_dups=False',
                                                             'background=False',
                                                             '**kwargs'],
                                                            'Ensure that the given indexes are in place.\n\n        :param key_or_list: a single index key or a list of index keys (to\n            construct a multi-field index); keys may be prefixed with a **+**\n            or a **-** to determine the index ordering\n        '),
                                                           ('_build_index_spec',
                                                            ['doc_cls', 'spec'],
                                                            'Build a PyMongo index spec from a MongoEngine index spec.\n        '),
                                                           ('_reset_already_indexed',
                                                            [],
                                                            'Helper to reset already indexed, can be useful for testing purposes'),
                                                           ('__call__',
                                                            ['q_obj=None',
                                                             'class_check=True',
                                                             'slave_okay=False',
                                                             '**query'],
                                                            'Filter the selected documents by calling the\n        :class:`~mongoengine.queryset.QuerySet` with a query.\n\n        :param q_obj: a :class:`~mongoengine.queryset.Q` object to be used in\n            the query; the :class:`~mongoengine.queryset.QuerySet` is filtered\n            multiple times with different :class:`~mongoengine.queryset.Q`\n            objects, only the last one will be used\n        :param class_check: If set to False bypass class name check when\n            querying collection\n        :param slave_okay: if True, allows this query to be run against a\n            replica secondary.\n        :param query: Django-style query keyword arguments\n        '),
                                                           ('filter',
                                                            ['*q_objs', '**query'],
                                                            'An alias of :meth:`~mongoengine.queryset.QuerySet.__call__`\n        '),
                                                           ('all',
                                                            [],
                                                            'Returns all documents.'),
                                                           ('_lookup_field',
                                                            ['document', 'parts'],
                                                            "Lookup a field based on its attribute and return a list containing\n        the field's parents and the field.\n        "),
                                                           ('_translate_field_name',
                                                            ['doc_cls', 'field', "sep='.'"],
                                                            'Translate a field attribute name to a database field name.\n        '),
                                                           ('_transform_query',
                                                            ['_doc_cls=None',
                                                             '_field_operation=False',
                                                             '**query'],
                                                            'Transform a query from Django-style format to Mongo format.\n        '),
                                                           ('get',
                                                            ['*q_objs', '**query'],
                                                            'Retrieve the the matching object raising\n        :class:`~mongoengine.queryset.MultipleObjectsReturned` or\n        `DocumentName.MultipleObjectsReturned` exception if multiple results and\n        :class:`~mongoengine.queryset.DoesNotExist` or `DocumentName.DoesNotExist`\n        if no results are found.\n\n        .. versionadded:: 0.3\n        '),
                                                           ('get_or_create',
                                                            ['write_options=None',
                                                             '*q_objs',
                                                             '**query'],
                                                            "Retrieve unique object or create, if it doesn't exist. Returns a tuple of\n        ``(object, created)``, where ``object`` is the retrieved or created object\n        and ``created`` is a boolean specifying whether a new object was created. Raises\n        :class:`~mongoengine.queryset.MultipleObjectsReturned` or\n        `DocumentName.MultipleObjectsReturned` if multiple results are found.\n        A new document will be created if the document doesn't exists; a\n        dictionary of default values for the new document may be provided as a\n        keyword argument called :attr:`defaults`.\n\n        :param write_options: optional extra keyword arguments used if we\n            have to create a new document.\n            Passes any write_options onto :meth:`~mongoengine.Document.save`\n\n        .. versionadded:: 0.3\n        "),
                                                           ('create',
                                                            ['**kwargs'],
                                                            'Create new object. Returns the saved object instance.\n\n        .. versionadded:: 0.4\n        '),
                                                           ('first',
                                                            [],
                                                            'Retrieve the first object matching the query.\n        '),
                                                           ('insert',
                                                            ['doc_or_docs', 'load_bulk=True'],
                                                            'bulk insert documents\n\n        :param docs_or_doc: a document or list of documents to be inserted\n        :param load_bulk (optional): If True returns the list of document instances\n\n        By default returns document instances, set ``load_bulk`` to False to\n        return just ``ObjectIds``\n\n        .. versionadded:: 0.5\n        '),
                                                           ('with_id',
                                                            ['object_id'],
                                                            'Retrieve the object matching the id provided.\n\n        :param object_id: the value for the id of the document to look up\n        '),
                                                           ('in_bulk',
                                                            ['object_ids'],
                                                            'Retrieve a set of documents by their ids.\n\n        :param object_ids: a list or tuple of ``ObjectId``\\ s\n        :rtype: dict of ObjectIds as keys and collection-specific\n                Document subclasses as values.\n\n        .. versionadded:: 0.3\n        '),
                                                           ('next',
                                                            [],
                                                            'Wrap the result in a :class:`~mongoengine.Document` object.\n        '),
                                                           ('rewind',
                                                            [],
                                                            'Rewind the cursor to its unevaluated state.\n\n        .. versionadded:: 0.3\n        '),
                                                           ('count',
                                                            [],
                                                            'Count the selected elements in the query.\n        '),
                                                           ('__len__', [], ''),
                                                           ('map_reduce',
                                                            ['map_f',
                                                             'reduce_f',
                                                             'output',
                                                             'finalize_f=None',
                                                             'limit=None',
                                                             'scope=None'],
                                                            "Perform a map/reduce query using the current query spec\n        and ordering. While ``map_reduce`` respects ``QuerySet`` chaining,\n        it must be the last call made, as it does not return a maleable\n        ``QuerySet``.\n\n        See the :meth:`~mongoengine.tests.QuerySetTest.test_map_reduce`\n        and :meth:`~mongoengine.tests.QuerySetTest.test_map_advanced`\n        tests in ``tests.queryset.QuerySetTest`` for usage examples.\n\n        :param map_f: map function, as :class:`~pymongo.code.Code` or string\n        :param reduce_f: reduce function, as\n                         :class:`~pymongo.code.Code` or string\n        :param output: output collection name, if set to 'inline' will try to\n                       use :class:`~pymongo.collection.Collection.inline_map_reduce`\n        :param finalize_f: finalize function, an optional function that\n                           performs any post-reduction processing.\n        :param scope: values to insert into map/reduce global scope. Optional.\n        :param limit: number of objects from current query to provide\n                      to map/reduce method\n\n        Returns an iterator yielding\n        :class:`~mongoengine.document.MapReduceDocument`.\n\n        .. note::\n\n            Map/Reduce changed in server version **>= 1.7.4**. The PyMongo\n            :meth:`~pymongo.collection.Collection.map_reduce` helper requires\n            PyMongo version **>= 1.11**.\n\n        .. versionchanged:: 0.5\n           - removed ``keep_temp`` keyword argument, which was only relevant\n             for MongoDB server versions older than 1.7.4\n\n        .. versionadded:: 0.3\n        "),
                                                           ('limit',
                                                            ['n'],
                                                            'Limit the number of returned documents to `n`. This may also be\n        achieved using array-slicing syntax (e.g. ``User.objects[:5]``).\n\n        :param n: the maximum number of objects to return\n        '),
                                                           ('skip',
                                                            ['n'],
                                                            'Skip `n` documents before returning the results. This may also be\n        achieved using array-slicing syntax (e.g. ``User.objects[5:]``).\n\n        :param n: the number of objects to skip before returning results\n        '),
                                                           ('hint',
                                                            ['index=None'],
                                                            "Added 'hint' support, telling Mongo the proper index to use for the\n        query.\n\n        Judicious use of hints can greatly improve query performance. When doing\n        a query on multiple fields (at least one of which is indexed) pass the\n        indexed field as a hint to the query.\n\n        Hinting will not do anything if the corresponding index does not exist.\n        The last hint applied to this cursor takes precedence over all others.\n\n        .. versionadded:: 0.5\n        "),
                                                           ('__getitem__',
                                                            ['key'],
                                                            'Support skip and limit using getitem and slicing syntax.\n        '),
                                                           ('distinct',
                                                            ['field'],
                                                            'Return a list of distinct values for a given field.\n\n        :param field: the field to select distinct values from\n\n        .. versionadded:: 0.4\n        '),
                                                           ('only',
                                                            ['*fields'],
                                                            'Load only a subset of this document\'s fields. ::\n\n            post = BlogPost.objects(...).only("title", "author.name")\n\n        :param fields: fields to include\n\n        .. versionadded:: 0.3\n        .. versionchanged:: 0.5 - Added subfield support\n        '),
                                                           ('exclude',
                                                            ['*fields'],
                                                            'Opposite to .only(), exclude some document\'s fields. ::\n\n            post = BlogPost.objects(...).exclude("comments")\n\n        :param fields: fields to exclude\n\n        .. versionadded:: 0.5\n        '),
                                                           ('fields',
                                                            ['**kwargs'],
                                                            "Manipulate how you load this document's fields.  Used by `.only()`\n        and `.exclude()` to manipulate which fields to retrieve.  Fields also\n        allows for a greater level of control for example:\n\n        Retrieving a Subrange of Array Elements:\n\n        You can use the $slice operator to retrieve a subrange of elements in\n        an array ::\n\n            post = BlogPost.objects(...).fields(slice__comments=5) // first 5 comments\n\n        :param kwargs: A dictionary identifying what to include\n\n        .. versionadded:: 0.5\n        "),
                                                           ('all_fields',
                                                            [],
                                                            'Include all fields. Reset all previously calls of .only() and .exclude(). ::\n\n            post = BlogPost.objects(...).exclude("comments").only("title").all_fields()\n\n        .. versionadded:: 0.5\n        '),
                                                           ('_fields_to_dbfields',
                                                            ['fields'],
                                                            'Translate fields paths to its db equivalents'),
                                                           ('order_by',
                                                            ['*keys'],
                                                            'Order the :class:`~mongoengine.queryset.QuerySet` by the keys. The\n        order may be specified by prepending each of the keys by a + or a -.\n        Ascending order is assumed.\n\n        :param keys: fields to order the query results by; keys may be\n            prefixed with **+** or **-** to determine the ordering direction\n        '),
                                                           ('explain',
                                                            ['format=False'],
                                                            "Return an explain plan record for the\n        :class:`~mongoengine.queryset.QuerySet`\\ 's cursor.\n\n        :param format: format the plan before returning it\n        "),
                                                           ('snapshot',
                                                            ['enabled'],
                                                            'Enable or disable snapshot mode when querying.\n\n        :param enabled: whether or not snapshot mode is enabled\n\n        ..versionchanged:: 0.5 - made chainable\n        '),
                                                           ('timeout',
                                                            ['enabled'],
                                                            'Enable or disable the default mongod timeout when querying.\n\n        :param enabled: whether or not the timeout is used\n\n        ..versionchanged:: 0.5 - made chainable\n        '),
                                                           ('slave_okay',
                                                            ['enabled'],
                                                            'Enable or disable the slave_okay when querying.\n\n        :param enabled: whether or not the slave_okay is enabled\n        '),
                                                           ('delete',
                                                            ['safe=False'],
                                                            'Delete the documents matched by the query.\n\n        :param safe: check if the operation succeeded before returning\n        '),
                                                           ('_transform_update',
                                                            ['_doc_cls=None', '**update'],
                                                            'Transform an update spec from Django-style format to Mongo format.\n        '),
                                                           ('update',
                                                            ['safe_update=True',
                                                             'upsert=False',
                                                             'multi=True',
                                                             'write_options=None',
                                                             '**update'],
                                                            'Perform an atomic update on the fields matched by the query. When\n        ``safe_update`` is used, the number of affected documents is returned.\n\n        :param safe_update: check if the operation succeeded before returning\n        :param upsert: Any existing document with that "_id" is overwritten.\n        :param write_options: extra keyword arguments for :meth:`~pymongo.collection.Collection.update`\n\n        .. versionadded:: 0.2\n        '),
                                                           ('update_one',
                                                            ['safe_update=True',
                                                             'upsert=False',
                                                             'write_options=None',
                                                             '**update'],
                                                            'Perform an atomic update on first field matched by the query. When\n        ``safe_update`` is used, the number of affected documents is returned.\n\n        :param safe_update: check if the operation succeeded before returning\n        :param upsert: Any existing document with that "_id" is overwritten.\n        :param write_options: extra keyword arguments for :meth:`~pymongo.collection.Collection.update`\n        :param update: Django-style update keyword arguments\n\n        .. versionadded:: 0.2\n        '),
                                                           ('__iter__', [], ''),
                                                           ('_sub_js_fields',
                                                            ['code'],
                                                            "When fields are specified with [~fieldname] syntax, where\n        *fieldname* is the Python name of a field, *fieldname* will be\n        substituted for the MongoDB name of the field (specified using the\n        :attr:`name` keyword argument in a field's constructor).\n        "),
                                                           ('exec_js',
                                                            ['code', '*fields', '**options'],
                                                            "Execute a Javascript function on the server. A list of fields may be\n        provided, which will be translated to their correct names and supplied\n        as the arguments to the function. A few extra variables are added to\n        the function's scope: ``collection``, which is the name of the\n        collection in use; ``query``, which is an object representing the\n        current query; and ``options``, which is an object containing any\n        options specified as keyword arguments.\n\n        As fields in MongoEngine may use different names in the database (set\n        using the :attr:`db_field` keyword argument to a :class:`Field`\n        constructor), a mechanism exists for replacing MongoEngine field names\n        with the database field names in Javascript code. When accessing a\n        field, use square-bracket notation, and prefix the MongoEngine field\n        name with a tilde (~).\n\n        :param code: a string of Javascript code to execute\n        :param fields: fields that you will be using in your function, which\n            will be passed in to your function as arguments\n        :param options: options that you want available to the function\n            (accessed in Javascript through the ``options`` object)\n        "),
                                                           ('where',
                                                            ['where_clause'],
                                                            'Filter ``QuerySet`` results with a ``$where`` clause (a Javascript\n        expression). Performs automatic field name substitution like\n        :meth:`mongoengine.queryset.Queryset.exec_js`.\n\n        .. note:: When using this mode of query, the database will call your\n                  function, or evaluate your predicate clause, for each object\n                  in the collection.\n\n        .. versionadded:: 0.5\n        '),
                                                           ('sum',
                                                            ['field'],
                                                            'Sum over the values of the specified field.\n\n        :param field: the field to sum over; use dot-notation to refer to\n            embedded document fields\n\n        .. versionchanged:: 0.5 - updated to map_reduce as db.eval doesnt work\n            with sharding.\n        '),
                                                           ('average',
                                                            ['field'],
                                                            'Average over the values of the specified field.\n\n        :param field: the field to average over; use dot-notation to refer to\n            embedded document fields\n\n        .. versionchanged:: 0.5 - updated to map_reduce as db.eval doesnt work\n            with sharding.\n        '),
                                                           ('item_frequencies',
                                                            ['field',
                                                             'normalize=False',
                                                             'map_reduce=True'],
                                                            'Returns a dictionary of all items present in a field across\n        the whole queried set of documents, and their corresponding frequency.\n        This is useful for generating tag clouds, or searching documents.\n\n        .. note::\n\n            Can only do direct simple mappings and cannot map across\n            :class:`~mongoengine.ReferenceField` or\n            :class:`~mongoengine.GenericReferenceField` for more complex\n            counting a manual map reduce call would is required.\n\n        If the field is a :class:`~mongoengine.ListField`, the items within\n        each list will be counted individually.\n\n        :param field: the field to use\n        :param normalize: normalize the results so they add to 1.0\n        :param map_reduce: Use map_reduce over exec_js\n\n        .. versionchanged:: 0.5 defaults to map_reduce and can handle embedded\n                            document lookups\n        '),
                                                           ('_item_frequencies_map_reduce',
                                                            ['field', 'normalize=False'],
                                                            ''),
                                                           ('_item_frequencies_exec_js',
                                                            ['field', 'normalize=False'],
                                                            'Uses exec_js to execute'),
                                                           ('__repr__', [], ''),
                                                           ('select_related',
                                                            ['max_depth=1'],
                                                            'Handles dereferencing of :class:`~pymongo.dbref.DBRef` objects to\n        a maximum depth in order to cut down the number queries to mongodb.\n\n        .. versionadded:: 0.5\n        ')],
                                               'properties': ['__already_indexed',
                                                              '_document',
                                                              '_collection_obj',
                                                              '_mongo_query',
                                                              '_query_obj',
                                                              '_initial_query',
                                                              '_where_clause',
                                                              '_loaded_fields',
                                                              '_ordering',
                                                              '_snapshot',
                                                              '_timeout',
                                                              '_class_check',
                                                              '_slave_okay',
                                                              '_cursor_obj',
                                                              '_limit',
                                                              '_skip',
                                                              '_hint',
                                                              '_query',
                                                              '_collection',
                                                              '_cursor_args',
                                                              '_cursor']},
             'mongoengine.queryset.QuerySetManager': {'bases': ['object'],
                                                      'constructor': ['queryset_func=None'],
                                                      'docstring': '',
                                                      'methods': [('__get__',
                                                                   ['instance', 'owner'],
                                                                   'Descriptor for instantiating a new QuerySet object when\n        Document.objects is accessed.\n        ')],
                                                      'properties': ['get_queryset',
                                                                     '_collections']},
             'mongoengine.queryset.QueryTreeTransformerVisitor': {'bases': ['mongoengine.queryset.QNodeVisitor'],
                                                                  'constructor': [],
                                                                  'docstring': 'Transforms the query tree in to a form that may be used with MongoDB.\n    ',
                                                                  'methods': [('visit_combination',
                                                                               ['combination'],
                                                                               '')],
                                                                  'properties': []},
             'mongoengine.queryset.SimplificationVisitor': {'bases': ['mongoengine.queryset.QNodeVisitor'],
                                                            'constructor': [],
                                                            'docstring': "Simplifies query trees by combinging unnecessary 'and' connection nodes\n    into a single Q-object.\n    ",
                                                            'methods': [('visit_combination',
                                                                         ['combination'],
                                                                         ''),
                                                                        ('_query_conjunction',
                                                                         ['queries'],
                                                                         'Merges query dicts - effectively &ing them together.\n        ')],
                                                            'properties': []},
             'mongoengine.signals.Namespace': {'bases': ['object'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('signal', ['name', 'doc=None'], '')],
                                               'properties': []},
             'mongoengine.signals._FakeSignal': {'bases': ['object'],
                                                 'constructor': ['name', 'doc=None'],
                                                 'docstring': 'If blinker is unavailable, create a fake class with the same\n        interface that allows sending of signals but will fail with an\n        error on anything else.  Instead of doing anything on send, it\n        will just ignore the arguments and do nothing instead.\n        ',
                                                 'methods': [('_fail',
                                                              ['*args', '**kwargs'],
                                                              '')],
                                                 'properties': ['name',
                                                                '__doc__',
                                                                'send',
                                                                'connect',
                                                                'disconnect',
                                                                'has_receivers_for',
                                                                'receivers_for',
                                                                'temporarily_connected_to',
                                                                '_fail']},
             'mongoengine.tests.query_counter': {'bases': ['object'],
                                                 'constructor': [],
                                                 'docstring': ' Query_counter contextmanager to get the number of queries. ',
                                                 'methods': [('__enter__',
                                                              [],
                                                              ' On every with block we need to drop the profile collection. '),
                                                             ('__exit__',
                                                              ['t', 'value', 'traceback'],
                                                              ' Reset the profiling level. '),
                                                             ('__eq__',
                                                              ['value'],
                                                              ' == Compare querycounter. '),
                                                             ('__ne__',
                                                              ['value'],
                                                              ' != Compare querycounter. '),
                                                             ('__lt__',
                                                              ['value'],
                                                              ' < Compare querycounter. '),
                                                             ('__le__',
                                                              ['value'],
                                                              ' <= Compare querycounter. '),
                                                             ('__gt__',
                                                              ['value'],
                                                              ' > Compare querycounter. '),
                                                             ('__ge__',
                                                              ['value'],
                                                              ' >= Compare querycounter. '),
                                                             ('__int__',
                                                              [],
                                                              ' int representation. '),
                                                             ('__repr__',
                                                              [],
                                                              ' repr query_counter as the number of queries. '),
                                                             ('_get_count',
                                                              [],
                                                              ' Get the number of queries. ')],
                                                 'properties': ['counter', 'db']}},
 'CONSTANTS': ['mongoengine.__all__',
               'mongoengine.__author__',
               'mongoengine.VERSION',
               'mongoengine.__version__',
               'mongoengine.base._document_registry',
               'mongoengine.connection.__all__',
               'mongoengine.connection._connection_defaults',
               'mongoengine.connection._connection',
               'mongoengine.connection._connection_settings',
               'mongoengine.connection._db_name',
               'mongoengine.connection._db_username',
               'mongoengine.connection._db_password',
               'mongoengine.connection._db',
               'mongoengine.dereference.dereference',
               'mongoengine.document.__all__',
               'mongoengine.fields.__all__',
               'mongoengine.fields.RECURSIVE_REFERENCE_CONSTANT',
               'mongoengine.queryset.__all__',
               'mongoengine.queryset.REPR_OUTPUT_SIZE',
               'mongoengine.queryset.DO_NOTHING',
               'mongoengine.queryset.NULLIFY',
               'mongoengine.queryset.CASCADE',
               'mongoengine.queryset.DENY',
               'mongoengine.queryset.RE_TYPE',
               'mongoengine.signals.__all__',
               'mongoengine.signals.signals_available',
               'mongoengine.signals.signals_available',
               'mongoengine.signals._signals',
               'mongoengine.signals.pre_init',
               'mongoengine.signals.post_init',
               'mongoengine.signals.pre_save',
               'mongoengine.signals.post_save',
               'mongoengine.signals.pre_delete',
               'mongoengine.signals.post_delete',
               'mongoengine.django.auth.REDIRECT_FIELD_NAME'],
 'FUNCTIONS': [('mongoengine.get_version', [], ''),
               ('mongoengine.base.get_document', ['name'], ''),
               ('mongoengine.base.subclass_exception', ['name', 'parents', 'unused'], ''),
               ('mongoengine.base.subclass_exception', ['name', 'parents', 'module'], ''),
               ('mongoengine.connection._get_connection',
                ['reconnect=False'],
                'Handles the connection to the database\n    '),
               ('mongoengine.connection._get_db',
                ['reconnect=False'],
                'Handles database connections and authentication based on the current\n    identity\n    '),
               ('mongoengine.connection.get_identity',
                [],
                'Creates an identity key based on the current process and thread\n    identity.\n    '),
               ('mongoengine.connection.connect',
                ['db', 'username=None', 'password=None', '**kwargs'],
                "Connect to the database specified by the 'db' argument. Connection\n    settings may be provided here as well if the database is not running on\n    the default port on localhost. If authentication is needed, provide\n    username and password arguments as well.\n    "),
               ('mongoengine.queryset.queryset_manager',
                ['func'],
                'Decorator that allows you to define custom QuerySet managers on\n    :class:`~mongoengine.Document` classes. The manager must be a function that\n    accepts a :class:`~mongoengine.Document` class as its first argument, and a\n    :class:`~mongoengine.queryset.QuerySet` as its second argument. The method\n    function should return a :class:`~mongoengine.queryset.QuerySet`, probably\n    the same one that was passed in, but modified in some way.\n    '),
               ('mongoengine.django.auth.get_hexdigest',
                ['algorithm', 'salt', 'raw_password'],
                ''),
               ('mongoengine.django.auth.get_user',
                ['userid'],
                "Returns a User object from an id (User.id). Django's equivalent takes\n    request, but taking an id instead leaves it up to the developer to store\n    the id in any way they want (session, signed cookie, etc.)\n    "),
               ('mongoengine.django.shortcuts._get_queryset',
                ['cls'],
                'Inspired by django.shortcuts.*'),
               ('mongoengine.django.shortcuts.get_document_or_404',
                ['cls', '*args', '**kwargs'],
                '\n    Uses get() to return an document, or raises a Http404 exception if the document\n    does not exist.\n\n    cls may be a Document or QuerySet object. All other passed\n    arguments and keyword arguments are used in the get() query.\n\n    Note: Like with get(), an MultipleObjectsReturned will be raised if more than one\n    object is found.\n\n    Inspired by django.shortcuts.*\n    '),
               ('mongoengine.django.shortcuts.get_list_or_404',
                ['cls', '*args', '**kwargs'],
                '\n    Uses filter() to return a list of documents, or raise a Http404 exception if\n    the list is empty.\n\n    cls may be a Document or QuerySet object. All other passed\n    arguments and keyword arguments are used in the filter() query.\n\n    Inspired by django.shortcuts.*\n    ')],
 'HIERARCHY': ['mongoengine',
               'mongoengine.base',
               'mongoengine.connection',
               'mongoengine.dereference',
               'mongoengine.document',
               'mongoengine.fields',
               'mongoengine.queryset',
               'mongoengine.signals',
               'mongoengine.tests',
               'mongoengine.django',
               'mongoengine.django.auth',
               'mongoengine.django.sessions',
               'mongoengine.django.shortcuts',
               'mongoengine.django.storage',
               'mongoengine.django.tests'],
 'POINTERS': {'mongoengine.*': 'mongoengine.signals.*',
              'mongoengine.base.DO_NOTHING': 'mongoengine.queryset.DO_NOTHING',
              'mongoengine.base.Document': 'mongoengine.Document',
              'mongoengine.base.DoesNotExist': 'mongoengine.queryset.DoesNotExist',
              'mongoengine.base.EmbeddedDocument': 'mongoengine.EmbeddedDocument',
              'mongoengine.base.GenericReferenceField': 'mongoengine.fields.GenericReferenceField',
              'mongoengine.base.MultipleObjectsReturned': 'mongoengine.queryset.MultipleObjectsReturned',
              'mongoengine.base.QuerySet': 'mongoengine.queryset.QuerySet',
              'mongoengine.base.QuerySetManager': 'mongoengine.queryset.QuerySetManager',
              'mongoengine.base.dereference': 'mongoengine.dereference.dereference',
              'mongoengine.base.operator': 'operator',
              'mongoengine.base.partial': 'functools.partial',
              'mongoengine.base.pymongo': 'pymongo',
              'mongoengine.base.pymongo.objectid': 'pymongo.objectid',
              'mongoengine.base.signals': 'mongoengine.signals',
              'mongoengine.base.sys': 'sys',
              'mongoengine.base.types': 'types',
              'mongoengine.base.warnings': 'warnings',
              'mongoengine.base.weakref': 'weakref',
              'mongoengine.connection': 'mongoengine.connection',
              'mongoengine.connection.Connection': 'pymongo.Connection',
              'mongoengine.connection.multiprocessing': 'multiprocessing',
              'mongoengine.connection.threading': 'threading',
              'mongoengine.dereference.BaseDict': 'mongoengine.base.BaseDict',
              'mongoengine.dereference.BaseList': 'mongoengine.base.BaseList',
              'mongoengine.dereference.Document': 'mongoengine.document.Document',
              'mongoengine.dereference.QuerySet': 'mongoengine.queryset.QuerySet',
              'mongoengine.dereference.ReferenceField': 'mongoengine.fields.ReferenceField',
              'mongoengine.dereference.TopLevelDocumentMetaclass': 'mongoengine.base.TopLevelDocumentMetaclass',
              'mongoengine.dereference._get_db': 'mongoengine.connection._get_db',
              'mongoengine.dereference.get_document': 'mongoengine.base.get_document',
              'mongoengine.dereference.operator': 'operator',
              'mongoengine.dereference.pymongo': 'pymongo',
              'mongoengine.django.auth.*': 'mongoengine.*',
              'mongoengine.django.auth.AnonymousUser': 'django.contrib.auth.models.AnonymousUser',
              'mongoengine.django.auth._': 'django.utils.translation.ugettext_lazy',
              'mongoengine.django.auth.datetime': 'datetime',
              'mongoengine.django.auth.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'mongoengine.django.auth.random': 'random.random',
              'mongoengine.django.auth.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'mongoengine.django.auth.smart_str': 'django.utils.encoding.smart_str',
              'mongoengine.django.sessions.CreateError': 'django.contrib.sessions.backends.base.CreateError',
              'mongoengine.django.sessions.Document': 'mongoengine.document.Document',
              'mongoengine.django.sessions.OperationError': 'mongoengine.queryset.OperationError',
              'mongoengine.django.sessions.SessionBase': 'django.contrib.sessions.backends.base.SessionBase',
              'mongoengine.django.sessions.SuspiciousOperation': 'django.core.exceptions.SuspiciousOperation',
              'mongoengine.django.sessions.datetime': 'datetime.datetime',
              'mongoengine.django.sessions.fields': 'mongoengine.fields',
              'mongoengine.django.sessions.force_unicode': 'django.utils.encoding.force_unicode',
              'mongoengine.django.shortcuts.BaseDocument': 'mongoengine.base.BaseDocument',
              'mongoengine.django.shortcuts.Http404': 'django.http.Http404',
              'mongoengine.django.shortcuts.QuerySet': 'mongoengine.queryset.QuerySet',
              'mongoengine.django.shortcuts.ValidationError': 'mongoengine.base.ValidationError',
              'mongoengine.django.storage.*': 'mongoengine.*',
              'mongoengine.django.storage.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'mongoengine.django.storage.Storage': 'django.core.files.storage.Storage',
              'mongoengine.django.storage.itertools': 'itertools',
              'mongoengine.django.storage.os': 'os',
              'mongoengine.django.storage.settings': 'django.conf.settings',
              'mongoengine.django.storage.urlparse': 'urlparse',
              'mongoengine.django.tests.TestCase': 'django.test.TestCase',
              'mongoengine.django.tests.connect': 'mongoengine.connect',
              'mongoengine.django.tests.settings': 'django.conf.settings',
              'mongoengine.document': 'mongoengine.document',
              'mongoengine.document.BaseDict': 'mongoengine.base.BaseDict',
              'mongoengine.document.BaseDocument': 'mongoengine.base.BaseDocument',
              'mongoengine.document.BaseList': 'mongoengine.base.BaseList',
              'mongoengine.document.DocumentMetaclass': 'mongoengine.base.DocumentMetaclass',
              'mongoengine.document.GenericReferenceField': 'mongoengine.fields.GenericReferenceField',
              'mongoengine.document.OperationError': 'mongoengine.queryset.OperationError',
              'mongoengine.document.ReferenceField': 'mongoengine.fields.ReferenceField',
              'mongoengine.document.TopLevelDocumentMetaclass': 'mongoengine.base.TopLevelDocumentMetaclass',
              'mongoengine.document.ValidationError': 'mongoengine.base.ValidationError',
              'mongoengine.document._get_db': 'mongoengine.connection._get_db',
              'mongoengine.document.dereference': 'mongoengine.dereference.dereference',
              'mongoengine.document.pymongo': 'pymongo',
              'mongoengine.document.signals': 'mongoengine.signals',
              'mongoengine.fields': 'mongoengine.fields',
              'mongoengine.fields.BaseField': 'mongoengine.base.BaseField',
              'mongoengine.fields.ComplexBaseField': 'mongoengine.base.ComplexBaseField',
              'mongoengine.fields.DO_NOTHING': 'mongoengine.queryset.DO_NOTHING',
              'mongoengine.fields.Document': 'mongoengine.document.Document',
              'mongoengine.fields.EmbeddedDocument': 'mongoengine.document.EmbeddedDocument',
              'mongoengine.fields.ObjectIdField': 'mongoengine.base.ObjectIdField',
              'mongoengine.fields.ValidationError': 'mongoengine.base.ValidationError',
              'mongoengine.fields._get_db': 'mongoengine.connection._get_db',
              'mongoengine.fields.datetime': 'datetime',
              'mongoengine.fields.decimal': 'decimal',
              'mongoengine.fields.get_document': 'mongoengine.base.get_document',
              'mongoengine.fields.gridfs': 'gridfs',
              'mongoengine.fields.itemgetter': 'operator.itemgetter',
              'mongoengine.fields.pymongo': 'pymongo',
              'mongoengine.fields.pymongo.binary': 'pymongo.binary',
              'mongoengine.fields.pymongo.dbref': 'pymongo.dbref',
              'mongoengine.fields.pymongo.son': 'pymongo.son',
              'mongoengine.fields.re': 're',
              'mongoengine.fields.time': 'time',
              'mongoengine.fields.urllib2': 'urllib2',
              'mongoengine.queryset': 'mongoengine.queryset',
              'mongoengine.queryset.ComplexBaseField': 'mongoengine.base.ComplexBaseField',
              'mongoengine.queryset.Document': 'mongoengine.document.Document',
              'mongoengine.queryset.MapReduceDocument': 'mongoengine.document.MapReduceDocument',
              'mongoengine.queryset.StringField': 'mongoengine.StringField',
              'mongoengine.queryset._get_db': 'mongoengine.connection._get_db',
              'mongoengine.queryset.copy': 'copy',
              'mongoengine.queryset.dereference': 'mongoengine.dereference.dereference',
              'mongoengine.queryset.itertools': 'itertools',
              'mongoengine.queryset.operator': 'operator',
              'mongoengine.queryset.pprint': 'pprint',
              'mongoengine.queryset.pymongo': 'pymongo',
              'mongoengine.queryset.pymongo.code': 'pymongo.code',
              'mongoengine.queryset.pymongo.dbref': 'pymongo.dbref',
              'mongoengine.queryset.pymongo.objectid': 'pymongo.objectid',
              'mongoengine.queryset.re': 're',
              'mongoengine.queryset.warnings': 'warnings',
              'mongoengine.signals': 'mongoengine.signals',
              'mongoengine.signals.Namespace': 'blinker.Namespace',
              'mongoengine.tests._get_db': 'mongoengine.connection._get_db'}}
